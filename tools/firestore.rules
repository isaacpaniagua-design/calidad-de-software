rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    function isPotros() {
      return isSignedIn() && request.auth.token.email.matches('.*@potros\\.itson\\.edu\\.mx$');
    }
    function allowedTeacherEmails() {
      // Mant√©n esta lista sincronizada con allowedTeacherEmails en js/firebase-config.js
      return [
        'isaac.paniagua@potros.itson.edu.mx',
      ];
    }
    function isAllowedTeacherEmail() {
      return isPotros() && allowedTeacherEmails().hasAny([request.auth.token.email]);
    }
    // Mark teachers by creating a doc at /teachers/{uid}
    function isTeacher() {
      return (
        isPotros() && (
          exists(/databases/$(database)/documents/teachers/$(request.auth.uid)) ||
          isAllowedTeacherEmail()
        )
      );
    }

    // Mark teachers collection access
    match /teachers/{uid} {
      // Allow get to let the client check its status
      allow get: if isPotros();
      // Allow the designated teacher to create their own marker doc
      allow create: if isAllowedTeacherEmail()
        && request.auth.uid == uid
        && request.resource.data.email == request.auth.token.email;
      // Lock updates/deletes from client
      allow update, delete: if false;
    }

    // Forum rules
    match /forum_topics/{topicId} {
      allow read: if isPotros();
      allow create: if isTeacher()
        && request.resource.data.title is string
        && request.resource.data.content is string
        && request.resource.data.authorEmail == request.auth.token.email;
      allow update, delete: if isTeacher();

      // Replies subcollection
      match /replies/{replyId} {
        allow read: if isPotros();
        allow create: if isPotros()
          && request.resource.data.text is string
          && request.resource.data.authorEmail == request.auth.token.email;
        allow update, delete: if isTeacher() || (isPotros() && resource.data.authorEmail == request.auth.token.email);
      }
    }

    // Materials rules
    match /materials/{materialId} {
      allow read: if isPotros();
      // Create/update/delete reserved to teachers
      allow create, delete: if isTeacher();
      // Allow teachers to update; allow potros to increment downloads by +1 only
      allow update: if isTeacher() || (
        isPotros() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['downloads']) &&
        request.resource.data.downloads == resource.data.downloads + 1
      );
    }

    // Attendance rules
    match /attendances/{attendanceId} {
      allow read: if isPotros();
      allow create: if isPotros()
        && request.resource.data.date is string
        && request.resource.data.email is string
        && request.resource.data.uid is string
        && request.resource.data.manual is bool
        && request.resource.data.createdByUid is string
        && request.resource.data.createdByEmail is string
        && (
          (
            request.resource.data.email == request.auth.token.email
            && request.resource.data.uid == request.auth.uid
            && request.resource.data.createdByUid == request.auth.uid
            && request.resource.data.createdByEmail == request.auth.token.email
          )
          || (
            isTeacher()
            && request.resource.data.manual == true
            && request.resource.data.createdByUid == request.auth.uid
            && request.resource.data.createdByEmail == request.auth.token.email
          )
        );
      allow update, delete: if false;
    }

    // Grades rules
    match /grades/{studentId} {
      allow read: if isPotros();
      allow create, update, delete: if isTeacher();
    }

    // Student uploads rules
    match /studentUploads/{uploadId} {
      allow read: if isTeacher() || (isPotros() && resource.data.student.uid == request.auth.uid);

      allow create: if isPotros()
        && request.resource.data.student is map
        && request.resource.data.student.uid is string
        && request.resource.data.student.uid == request.auth.uid
        && request.resource.data.title is string
        && request.resource.data.kind is string
        && request.resource.data.status is string;

      allow update, delete: if isTeacher();
    }

    // NOTE: Merge these forum rules into your existing rules if you already have them.

    match /users/{userId} {
      allow read: if isTeacher();
      allow write: if false;
    }

    match /grupos/{grupoId} {
      allow read: if isTeacher();
      allow create, update, delete: if false;

      match /members/{memberId} {
        allow read: if isTeacher();
        allow write: if false;
      }

      match /calificaciones/{studentId} {
        allow read: if isTeacher();
        allow create, update, delete: if false;

        match /items/{itemId} {
          allow read: if isTeacher();
          allow create, update, delete: if isTeacher();
        }
      }

      match /deliverables/{deliverableId} {
        allow read: if isTeacher();
        allow create, update, delete: if isTeacher();
      }

      match /exams/{examId} {
        allow read: if isTeacher();
        allow create, update, delete: if isTeacher();
      }

      match /gantt/{rowId} {
        allow read: if isTeacher();
        allow create, update, delete: if isTeacher();
      }

      match /rubric/{rubricId} {
        allow read: if isTeacher();
        allow create, update, delete: if isTeacher();
      }

      match /assignments/{assignmentId} {
        allow read: if isTeacher();
        allow create, update, delete: if isTeacher();
      }
    }
  }
}
