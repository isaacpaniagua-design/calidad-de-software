rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isPotros() { return isSignedIn() && request.auth.token.email.matches('.*@potros\\.itson\\.edu\\.mx$'); }
    function allowedTeacherEmails() { return ['isaac.paniagua@potros.itson.edu.mx']; }
    function isAllowedTeacherEmail() { return isPotros() && (request.auth.token.email in allowedTeacherEmails()); }
    function isTeacher() {
      return isPotros() && (
        exists(/databases/$(database)/documents/teachers/$(request.auth.uid)) ||
        isAllowedTeacherEmail()
      );
    }

    // Users: resolver UID por matr√≠cula
    match /users/{uid} {
      allow read: if isTeacher();
      allow create, update, delete: if false;
    }

    match /teachers/{uid} {
      allow get: if isPotros();
      allow create: if isAllowedTeacherEmail()
        && request.auth.uid == uid
        && request.resource.data.email == request.auth.token.email;
      allow update, delete: if false;
    }

    // Foro
    match /forum_topics/{topicId} {
      // Lectura para cuentas @potros
      allow read: if isPotros();

      // Crear/editar/borrar solo docentes
      allow create: if isTeacher()
        && request.resource.data.title is string
        && request.resource.data.content is string
        && request.resource.data.authorEmail == request.auth.token.email;
      allow update, delete: if isTeacher();
    }

    match /forum_topics/{topicId}/replies/{replyId} {
      allow read: if isPotros();
      allow create: if isPotros()
        && request.resource.data.text is string
        && request.resource.data.authorEmail == request.auth.token.email;
      allow update, delete: if isTeacher() || (isPotros() && resource.data.authorEmail == request.auth.token.email);
    }

    // Materiales
    match /materials/{materialId} {
      allow read: if isPotros();
      allow create, delete: if isTeacher();
      allow update: if isTeacher() || (
        isPotros() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['downloads']) &&
        request.resource.data.downloads == resource.data.downloads + 1
      );
    }

    // Asistencias
    match /attendances/{attendanceId} {
      allow read: if isPotros();
      allow create: if isPotros()
        && request.resource.data.date is string
        && request.resource.data.email is string
        && request.resource.data.uid is string
        && request.resource.data.manual is bool
        && request.resource.data.createdByUid is string
        && request.resource.data.createdByEmail is string
        && (
          (
            request.resource.data.email == request.auth.token.email
            && request.resource.data.uid == request.auth.uid
            && request.resource.data.createdByUid == request.auth.uid
            && request.resource.data.createdByEmail == request.auth.token.email
          )
          || (
            isTeacher()
            && request.resource.data.manual == true
            && request.resource.data.createdByUid == request.auth.uid
            && request.resource.data.createdByEmail == request.auth.token.email
          )
        );
      allow update, delete: if false;
    }

    // Grades rules
    match /grades/{studentId} {
      allow read: if isPotros();
      allow create, update, delete: if isTeacher();
    }

    // Student uploads rules
    match /studentUploads/{uploadId} {
      allow read: if isTeacher() || (isPotros() && resource.data.student.uid == request.auth.uid);

      allow create: if isPotros()
        && request.resource.data.student is map
        && request.resource.data.student.uid is string
        && request.resource.data.student.uid == request.auth.uid
        && request.resource.data.title is string
        && request.resource.data.kind is string
        && request.resource.data.status is string;

      allow update, delete: if isTeacher();
    }




    // Calificaciones anidadas por grupo
    match /grupos/{grupo}/calificaciones/{uid} {
      allow read: if isPotros();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupo}/calificaciones/{uid}/items/{itemId} {
      allow read: if isPotros();
      allow create, update, delete: if isTeacher();
    }
    
    match /users/{userId} {
      allow read: if isTeacher();
      allow write: if false;
    }

    match /grupos/{grupoId} {
      allow read: if isTeacher();
      allow create, update, delete: if false;
    }

    match /grupos/{grupoId}/members/{memberId} {
      allow read: if isTeacher();

      function isValidMemberPayload() {
        return request.resource.data.uid == memberId
          && request.resource.data.displayName is string
          && request.resource.data.nombre is string
          && request.resource.data.email is string
          && (request.resource.data.matricula == null || request.resource.data.matricula is string)
          && request.resource.data.role == 'student'
          && request.resource.data.updatedAt is timestamp
          && (
            !('createdAt' in request.resource.data) || request.resource.data.createdAt is timestamp
          );
      }

      allow create: if isTeacher() && isValidMemberPayload();
      allow update: if isTeacher() && isValidMemberPayload();
      allow delete: if isTeacher();
    }

    match /grupos/{grupoId}/calificaciones/{studentId} {
      allow read: if isTeacher();
      allow create, update, delete: if false;
    }

    match /grupos/{grupoId}/calificaciones/{studentId}/items/{itemId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupoId}/deliverables/{deliverableId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupoId}/exams/{examId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupoId}/gantt/{rowId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupoId}/rubric/{rubricId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }

    match /grupos/{grupoId}/assignments/{assignmentId} {
      allow read: if isTeacher();
      allow create, update, delete: if isTeacher();
    }
  }
}
